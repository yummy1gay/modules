__version__ = (1, 0, 0, 1)

# This file is a part of Hikka Userbot
# Code is NOT licensed under CC-BY-NC-ND 4.0 unless otherwise specified.
# üåê https://github.com/hikariatama/Hikka

# You CAN edit this file without direct permission from the author.
# You can redistribute this file with any modifications.

# meta developer: @yg_modules
# scope: hikka_only
# scope: hikka_min 1.6.3

# ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ
# ‚ñë‚ñà‚ñë‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñë‚ñà‚ñë‚ÄÉ ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñÑ‚ñà

import re
from .. import loader, utils
from telethon import events
import os

@loader.tds
class yg_trigger(loader.Module):
    """–¢—Ä–∏–≥–≥–µ—Ä-–º–æ–¥—É–ª—å. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: —è–º–º–µ.—Ä—Ñ/—Ç—Ä–∏–≥–≥–µ—Ä"""

    strings = {"name": "yg_trigger"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "watcher_on",
                True,
                "—Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Ç—á–µ—Ä–∞",
                validator=loader.validators.Boolean()
            )
        )

    async def client_ready(self, client, db):
        self.db = db
        self.triggers = self.db.get("triggers", "list", [])
        self.client = client
        handlers = [
            (self.trigger, [events.NewMessage, events.MessageEdited])
        ]

        for handler_func, event_list in handlers:
            for event in event_list:
                self.client.add_event_handler(handler_func, event)

    async def save_triggers(self):
        self.db.set("triggers", "list", self.triggers)

    async def validate(self, entity_value, target_entity):
        entity_k = entity_value.replace("@", "")

        entity_id = getattr(target_entity, "id", None)
        entity_usernames = await self.get_usernames(target_entity)

        if entity_k.isdigit():
            return int(entity_value) == entity_id

        return entity_k.lower() in entity_usernames

    async def add_trigger(self, conditions: dict, response: str):
        self.triggers.append({"conditions": conditions, "response": response})
        await self.save_triggers()

    async def triggercmd(self, message):
        """–≤–∫–ª/–≤—ã–∫–ª –≤–æ—Ç—á–µ—Ä"""
        self.config["watcher_on"] = not self.config["watcher_on"]
        await message.edit(f"<emoji document_id=5361741454685256344>üéÆ</emoji> <b>–¢—Ä–∏–≥–≥–µ—Ä-–º–æ–¥ {'–≤–∫–ª—é—á–µ–Ω' if self.config['watcher_on'] else '–≤—ã–∫–ª—é—á–µ–Ω'}</b>")

    async def remove_trigger(self, index: int):
        try:
            del self.triggers[index]
            await self.save_triggers()
            return True
        except IndexError:
            return False

    async def clear_triggers(self):
        self.triggers = []
        await self.save_triggers()

    async def get_usernames(self, entity):
        usernames = []

        if entity.username:
            username = entity.username
            if username:
                usernames.append(username.lower())

        if entity.usernames:
            additional_usernames = [
                u.username.lower() for u in (getattr(entity, "usernames", []) or [])
            ]
            usernames.extend(additional_usernames)

        return usernames

    async def list_triggerscmd(self, message):
        """–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã"""
        if not self.triggers:
            await utils.answer(message, "<emoji document_id=5461117441612462242>üôÇ</emoji> <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤</b>")
            return

        reply_with_html = "<emoji document_id=5334544901428229844>‚ÑπÔ∏è</emoji> <b>–°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:</b>\n\n"
        
        reply_plain_text = "–°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:\n\n"
        
        for i, trigger in enumerate(self.triggers):
            conditions = "\n".join([f"<b>-</b> {k}: <code>{v}</code>" for k, v in trigger["conditions"].items()])
            if not conditions:
                conditions = "<b>–ù–µ—Ç —É—Å–ª–æ–≤–∏–π (all=true)</b>"
            reply_with_html += f"<b>{i}.</b> –£—Å–ª–æ–≤–∏—è:\n{conditions}\n\n<emoji document_id=5443038326535759644>üí¨</emoji> <b>–û—Ç–≤–µ—Ç:</b> <code>{trigger['response']}</code>\n\n"
            
            reply_plain_text += f"{i}.\n–£—Å–ª–æ–≤–∏—è:\n{conditions}\n–û—Ç–≤–µ—Ç: {trigger['response']}\n\n"

        if len(reply_with_html) > 4096:
            file_path = "triggers_list.txt"
            with open(file_path, "w", encoding="utf-8") as file:
                file.write(reply_plain_text)

            await message.delete()
            await self.client.send_file(message.chat, caption="<emoji document_id=5433653135799228968>üìÅ</emoji> <i>–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ—ç—Ç–æ–º—É –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ.</i>", file=file_path)
            os.remove(file_path)
        else:
            await utils.answer(message, reply_with_html)

    async def split(self, input_str):
        is_in_quotes = False
        split_index = -1

        for i, char in enumerate(input_str):
            if char == '"':
                is_in_quotes = not is_in_quotes
            elif char == '|' and not is_in_quotes:
                split_index = i
                break

        if split_index == -1:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '|'")

        return input_str[:split_index].strip(), input_str[split_index + 1:].strip()

    async def add_triggercmd(self, message):
        """<—É—Å–ª–æ–≤–∏—è> | <–æ—Ç–≤–µ—Ç> - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä"""
        args = utils.get_args_raw(message)
        if not args or "|" not in args:
            await utils.answer(
                message,
                "<emoji document_id=5240241223632954241>üö´</emoji> <b>–§–æ—Ä–º–∞—Ç: <—É—Å–ª–æ–≤–∏—è> | <–æ—Ç–≤–µ—Ç></b>\n<emoji document_id=5325547803936572038>‚ú®</emoji> –ü—Ä–∏–º–µ—Ä: <code>text=\"–ü—Ä–∏–≤–µ—Ç\" | –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!</code>"
            )
            return

        try:
            conditions_raw, response = await self.split(args)

            valid_keys = {
                "text", "user", "chat", "starts_with", "ends_with", "contains",
                "regex", "is_command", "word_count", "char_count", "is_reply", "is_forwarded",
                "media_type", "message_length", "time_range", "date", "weekday", "all"
            }

            conditions = {}

            pattern = r'(\w+)=((?:\"(?:[^\"]|\\\")*\"|[^,\s]+))'
            matches = re.finditer(pattern, conditions_raw)

            for match in matches:
                key, value = match.group(1), match.group(2)

                if key not in valid_keys:
                    raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: {key}")

                if key in {"text", "regex", "contains", "starts_with", "ends_with"}:
                    if not (value.startswith('"') and value.endswith('"')):
                        raise ValueError(f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É—Å–ª–æ–≤–∏—è {key} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö")
                    value = value[1:-1].replace('\\"', '"')

                if key == "all" and value.lower() == "true":
                    conditions = {"all": True}
                    break

                conditions[key] = value

            if not conditions:
                raise ValueError(
                    "üò® –¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –Ω–∏–∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏–π.. –ï—Å–ª–∏ —Ç—ã —Ç–∞–∫–æ–π —Å–º–µ–ª—ã–π, —É–∫–∞–∂–∏ all=true –≤ —É—Å–ª–æ–≤–∏—è—Ö!"
                )

            if conditions.get("all"):
                conditions = {}

            await self.add_trigger(conditions, response)

            conditions_str = "\n".join([f"<b>-</b> {k}: <code>{v}</code>" for k, v in conditions.items()])
            if not conditions_str:
                conditions_str = "<b>–ù–µ—Ç —É—Å–ª–æ–≤–∏–π (all=true)</b>"

            await utils.answer(
                message,
                f"<emoji document_id=5456140674028019486>‚ö°Ô∏è</emoji> <b>–¢—Ä–∏–≥–≥–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n–£—Å–ª–æ–≤–∏—è:\n{conditions_str}\n\n<emoji document_id=5443038326535759644>üí¨</emoji> <b>–û—Ç–≤–µ—Ç:</b> <code>{response}</code>"
            )

        except ValueError as e:
            await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji> <b>–û—à–∏–±–∫–∞:</b> <code>{e}</code>")
        except Exception as e:
            await utils.answer(message, f"<emoji document_id=5240241223632954241>üö´</emoji> <b>–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:</b> <code>{e}</code>")

    async def remove_triggercmd(self, message):
        """<–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä"""
        args = utils.get_args_raw(message)
        if not args.isdigit():
            await utils.answer(
                message,
                "<emoji document_id=5240241223632954241>üö´</emoji> <b>–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>"
            )
            return

        index = int(args)
        if await self.remove_trigger(index):
            await utils.answer(message, "<emoji document_id=5445267414562389170>üóë</emoji> <b>–¢—Ä–∏–≥–≥–µ—Ä —É–¥–∞–ª—ë–Ω!</b>")
        else:
            await utils.answer(message, "<emoji document_id=5240241223632954241>üö´</emoji> <b> –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–∏–≥–≥–µ—Ä–∞</b>")

    async def clear_triggerscmd(self, message):
        """—É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã"""
        await self.clear_triggers()
        await utils.answer(message, "<emoji document_id=5445267414562389170>üóë</emoji> <b>–í—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã!</b>")

    async def trigger(self, message):
        if not self.config["watcher_on"]:
            return
        
        responses = []

        for trigger in self.triggers:
            conditions = trigger["conditions"]
            match = True

            for key, value in conditions.items():
                value = value.strip('"')
                if key == "text" and value.lower() != message.raw_text.lower():
                    match = False
                    break
                elif key == "user" and not await self.validate(value, message.sender):
                    match = False
                    break
                elif key == "chat" and not await self.validate(value, message.chat):
                    match = False
                    break
                elif key == "starts_with" and not message.raw_text.lower().startswith(value.lower()):
                    match = False
                    break
                elif key == "ends_with" and not message.raw_text.lower().endswith(value.lower()):
                    match = False
                    break
                elif key == "contains" and value.lower() not in message.raw_text.lower():
                    match = False
                    break
                elif key == "regex" and not re.search(value, message.raw_text):
                    match = False
                    break
                elif key == "is_command" and value.lower() == "true" and not message.raw_text.startswith("/"):
                    match = False
                    break
                elif key == "word_count" and len(message.raw_text.split()) != int(value):
                    match = False
                    break
                elif key == "char_count" and len(message.raw_text) != int(value):
                    match = False
                    break
                elif key == "is_reply" and value.lower() == "true" and not message.is_reply:
                    match = False
                    break
                elif key == "is_forwarded" and value.lower() == "true" and not message.fwd_from:
                    match = False
                    break
                elif key == "media_type":
                    media_types = {"photo": message.photo, "video": message.video, "sticker": message.sticker, "voice": message.voice, "audio": message.audio}
                    if not media_types.get(value.lower()):
                        match = False
                        break
                elif key == "message_length" and not (int(value.split("-", 1)[0]) <= len(message.raw_text) <= int(value.split("-", 1)[1])):
                    match = False
                    break
                elif key == "time_range" and not (int(value.split("-", 1)[0]) <= message.date.hour <= int(value.split("-", 1)[1])):
                    match = False
                    break
                elif key == "date" and value != message.date.strftime("%Y-%m-%d"):
                    match = False
                    break
                elif key == "weekday" and value.lower() != message.date.strftime("%A").lower():
                    match = False
                    break

            if match:
                responses.append(trigger["response"])

        for response in responses:
            await message.reply(response)