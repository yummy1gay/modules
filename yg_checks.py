#meta developer: @yummy1gay

import re
from telethon import events
from collections import defaultdict
from .. import loader

@loader.tds
class yg_checks(loader.Module):
    """–ê–∫—Ç–∏–≤–∞—Ç–æ—Ä —á–µ–∫–æ–≤ @send (@CryptoBot)"""

    strings = {"name": "yg_checks"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "logs_username",
                "",
                "@username –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ª–æ–≥–∏",
                validator=loader.validators.Hidden(loader.validators.String()),
            ),
            loader.ConfigValue(
                "logs_enabled",
                True,
                "–æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "track_private",
                True,
                "–∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –ª–∏—á–∫–µ",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "delete_shlak",
                True,
                "—É–¥–∞–ª–µ–Ω–∏–µ —à–ª–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–∏–ø–∞ –ø—Ä–æ—Å—å–±–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—Å—è, –ª–∏–±–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "watcher_on",
                True,
                "—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä–∞",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "no_track_users",
                ["username"],
                '—á—å–∏ —á–µ–∫–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å (—é–∑–µ—Ä —É–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±–µ–∑ @)',
                validator=loader.validators.Series(
                    loader.validators.Union(loader.validators.String(), loader.validators.Integer())
                ),
            ),
        )
        self.sent_codes = defaultdict(bool)

    async def client_ready(self, client, db):
        self.client = client
        self.client.add_event_handler(self.watcher, events.NewMessage)
        self.client.add_event_handler(self.watcher, events.MessageEdited)

    async def watcher(self, event):
        if self.config["watcher_on"]:
            if event.message and event.sender_id != (await self.client.get_me()).id and event.sender_id != 1559501630:
                if not self.config["track_private"] and event.is_private:
                    return

                sender_username = (await self.client.get_entity(event.sender_id)).username
                if sender_username in self.config["no_track_users"]:
                    return

                message_text = event.text
                url_pattern = r'https?://t\.me/(?:send|CryptoBot)\?start=(CQ[^&\s]+)'
                codes_in_text = re.findall(url_pattern, message_text)

                if event.reply_markup:
                    for row in event.reply_markup.rows:
                        for button in row.buttons:
                            try:
                                if button.url:
                                    button_url = button.url
                                    code_match = re.match(url_pattern, button_url)
                                    if code_match:
                                        code = code_match.group(1)
                                        if not self.sent_codes[code]:
                                            await self.client.send_message(1559501630, f"/start {code}")
                                            self.sent_codes[code] = True
                                            await self.send_log_message(event.message, code)
                            except AttributeError:
                                continue

                if codes_in_text:
                    for code in codes_in_text:
                        if not self.sent_codes[code]:
                            await self.client.send_message(1559501630, f"/start {code}")
                            self.sent_codes[code] = True
                            await self.send_log_message(event.message, code)

                if self.config['delete_shlak']:
                    if event.sender_id == 1559501630 and any(text in event.text for text in [
                        "–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–µ–∫, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª(—ã).",
                        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–µ–∫. –û–Ω –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.",
                        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è",
                        "–≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."
                    ]):
                        try:
                            await event.delete()
                            async for gmsg in self.client.iter_messages('CryptoBot', limit=1):
                                await gmsg.delete()
                        except Exception as e:
                            print(f"{e}")

    async def send_log_message(self, message, code):
        username = self.config["logs_username"]
        if self.config["logs_enabled"]:
            if username:
                chat_id = str(message.chat_id).replace('-100', '')
                if message.is_private:
                    sender_username = (await self.client.get_entity(message.sender_id)).username
                    await self.client.send_message(username, f"<emoji document_id=5431449001532594346>‚ö°Ô∏è</emoji> <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —á–µ–∫:</b>\n\n<emoji document_id=5870527201874546272>üîó</emoji> <b>–°—Å—ã–ª–∫–∞ —á–µ–∫–∞:</b> <i>t.me/send?start={code}<i>\n<emoji document_id=5879770735999717115>üë§</emoji> <b>–ß–µ–∫ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:</b> <i>@{sender_username}</i>", link_preview=False)
                else:
                    message_link = f"t.me/c/{chat_id}/{message.id}"
                    await self.client.send_message(username, f"<emoji document_id=5431449001532594346>‚ö°Ô∏è</emoji> <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —á–µ–∫:</b>\n\n<emoji document_id=5870527201874546272>üîó</emoji> <b>–°—Å—ã–ª–∫–∞ —á–µ–∫–∞:</b> <i>t.me/send?start={code}<i>\n<emoji document_id=5870527201874546272>üîó</emoji> <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫–æ–º:</b> <i>{message_link}</i>", link_preview=False)

    async def checkscmd(self, message):
        """–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"""
        await message.edit("<emoji document_id=5361836987642815474>ü¶ã</emoji> <b>–ê–∫—Ç–∏–≤–∞—Ç–æ—Ä —á–µ–∫–æ–≤ @send (@CryptoBot) —Ä–∞–±–æ—Ç–∞–µ—Ç</b>")

    async def ygactcmd(self, message):
        """–≤–∫–ª/–≤—ã–∫–ª –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä"""
        self.config["watcher_on"] = not self.config["watcher_on"]
        await message.edit(f"<emoji document_id=5361836987642815474>ü¶ã</emoji> <b>–ê–∫—Ç–∏–≤–∞—Ç–æ—Ä {'–≤–∫–ª—é—á–µ–Ω' if self.config['watcher_on'] else '–≤—ã–∫–ª—é—á–µ–Ω'}</b>")

    async def yglogscmd(self, message):
        """–≤–∫–ª/–≤—ã–∫–ª –æ—Ç–ø—Ä–∞–≤–∫—É –ª–æ–≥–æ–≤"""
        self.config["logs_enabled"] = not self.config["logs_enabled"]
        await message.edit(f"<emoji document_id=5891243564309942507>üí¨</emoji> <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ {'–≤–∫–ª—é—á–µ–Ω–∞' if self.config['logs_enabled'] else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}</b>")

    async def ygshlcmd(self, message):
        """–≤–∫–ª/–≤—ã–∫–ª —É–¥–∞–ª–µ–Ω–∏–µ —à–ª–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.config["delete_shlak"] = not self.config["delete_shlak"]
        await message.edit(f"<emoji document_id=5891243564309942507>üí¨</emoji> <b>–£–¥–∞–ª–µ–Ω–∏–µ —à–ª–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–π {'–≤–∫–ª—é—á–µ–Ω–æ' if self.config['delete_shlak'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}</b>")

    async def yglscmd(self, message):
        """–≤–∫–ª/–≤—ã–∫–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –ª–∏—á–∫–µ"""
        self.config["track_private"] = not self.config["track_private"]
        await message.edit(f"<emoji document_id=5879770735999717115>üë§</emoji> <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –ª–∏—á–∫–µ {'–≤–∫–ª—é—á–µ–Ω–∞' if self.config['track_private'] else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}</b>")