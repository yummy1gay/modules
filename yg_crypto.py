# meta developer: @yummy_gay

import random as r
import requests
import time
from telethon.tl.types import Message
from .. import loader, utils


class MeowCryptoManagerMod(loader.Module):
    """–ö—Ä—É—Ç–æ–π –º–æ–¥—É–ª—å –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —á–µ–∫–∞—Ç—å –∫—É—Ä—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏üï∂"""

    strings = {
        "name": "yg_crypto",
        "inc_args": "<b>üê≥ Incorrect args</b>",
        "keyerror": (
            "üóø <b>Maybe the coin is not in the site database or you typed the wrong"
            " name.</b>"
        ),
        "okey": "<b>üëØ Successfully. Current default valute: {}</b>",
    }
    strings_ru = {
        "inc_args": "<b><emoji document_id=5348140027698227662>üôÄ</emoji> –ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã</b>",
        "keyerror": (
            "<b><emoji document_id=5348140027698227662>üôÄ</emoji> –í–æ–∑–º–æ–∂–Ω–æ –º–æ–Ω–µ—Ç—ã –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞, –∏–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ"
            " –Ω–∞–∑–≤–∞–Ω–∏–µ.</b>"
        ),
        "okey": "<b><emoji document_id=5348140027698227662>üôÄ</emoji> –£—Å–ø–µ—à–Ω–æ. –¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞: {}</b>",
    }

    async def client_ready(self, client, db):
        self.db = db
        self.client = client

        if "defaultvalute" not in self.db:
            self.db.set("defaultvalute", "update", True)

    async def –º–æ–Ω–µ—Ç–∞cmd(self, message: Message):
        """<–Ω–∞–∑–≤–∞–Ω–∏–µ> –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∏–ø—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""

        args = utils.get_args_raw(message)
        self.db.set("defaultvalute", "val", args)
        await utils.answer(message, self.strings("okey").format(args))

    async def –≤–∫–ª–≤—ã–∫–ªcmd(self, message: Message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ (–∫–∞–∂–¥—ã–µ 11 —Å–µ–∫)"""
        current_state = self.db.get("defaultvalute", "update", True)
        new_state = not current_state
        self.db.set("defaultvalute", "update", new_state)

        if new_state:
            await utils.answer(message, "<b>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞: –≤–∫–ª</b>")
        else:
            await utils.answer(message, "<b>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞: –≤—ã–∫–ª</b>")

    async def –∫—É—Ä—Åcmd(self, message: Message):
        "<–∫–æ–ª-–≤–æ> <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã> —Å–º–æ—Ç–µ—Ä—Ç—å –∫—É—Ä—Å"
        args = utils.get_args_raw(message)
        tray = self.db.get("defaultvalute", "val", args)
        if tray == "":
            tray = "btc"
        if not args:
            args = "1" + " " + str(tray)
        args_list = args.split(" ")
        try:
            if len(args_list) == 1 and isinstance(float(args_list[0]), float) == True:
                args_list.append(str(tray))
        except Exception:
            args_list = ["1", args_list[0]]
        coin = args_list[1].upper()

        while True:
            api = requests.get(
                f"https://min-api.cryptocompare.com/data/price?fsym={coin}&tsyms=USD,RUB,UAH,PLN,KZT,BTC,ETH,TONCOIN"
            ).json()
            smiles = r.choice(
                [
                    "<emoji document_id=5348140027698227662>üôÄ</emoji>"
                ]
            )

            try:
                try:
                    count = float(args_list[0])
                    form = (
                        "{} <b><i>{} {} is:</i></b>\n\n<emoji"
                        " document_id=6323374027985389586>üá∫üá∏</emoji>"
                        " <b>{}$</b>\n<emoji"
                        " document_id=6323289850921354919>üá∫üá¶</emoji>"
                        " <b>{}‚Ç¥</b>\n<emoji"
                        " document_id=6323602387101550101>üáµüá±</emoji>"
                        " <b>{}z≈Ç.</b>\n<emoji"
                        " document_id=6323139226418284334>üá∑üá∫</emoji>"
                        " <b>{}‚ÇΩ</b>\n<emoji"
                        " document_id=6323135275048371614>üá∞üáø</emoji>"
                        " <b>{}‚Ç∏</b>\n<emoji"
                        " document_id=5465465383035083768>üí∞</emoji> <b>{}"
                        " BTC</b>\n<emoji document_id=5465198785825087352>üí∞</emoji>"
                        " <b>{} ETH</b>\n<emoji"
                        " document_id=5197515039296200279>üí∞</emoji> <b>{} TON</b>"
                    ).format(
                        smiles,
                        count,
                        coin,
                        round(api["USD"] * count, 2),
                        round(api["UAH"] * count, 2),
                        round(api["PLN"] * count, 2),
                        round(api["RUB"] * count, 2),
                        round(api["KZT"] * count, 2),
                        round(api["BTC"] * count, 4),
                        round(api["ETH"] * count, 4),
                        round(api["TONCOIN"] * count, 4),
                    )

                    current_time = time.strftime("%H:%M:%S")
                    form += f"\n\n<b><i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</i></b> <b>{current_time}</b>"

                    await utils.answer(message, form)
                except KeyError:
                    await utils.answer(message, self.strings["keyerror"])
            except ValueError:
                await utils.answer(message, self.strings["inc_args"])

            update_state = self.db.get("defaultvalute", "update", True)

            if not update_state:
                break

            time.sleep(11)