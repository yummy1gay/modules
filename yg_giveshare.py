__version__ = (1, 4, 8, 8)

# This file is a part of Hikka Userbot
# Code is NOT licensed under CC-BY-NC-ND 4.0 unless otherwise specified.
# üåê https://github.com/hikariatama/Hikka

# You CAN edit this file without direct permission from the author.
# You can redistribute this file with any modifications.

# meta developer: @yg_modules
# scope: hikka_only
# scope: hikka_min 1.6.3

# ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ
# ‚ñë‚ñà‚ñë‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñë‚ñà‚ñë‚ÄÉ ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñÑ‚ñà

import re
import cloudscraper
from telethon import events
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.types import KeyboardButtonUrl, InputBotAppShortName
from telethon.tl.functions.messages import RequestAppWebViewRequest
from telethon import errors
from urllib.parse import unquote

from .. import loader

@loader.tds
class yg_giveshare(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö GiveShareBot"""

    strings = {"name": "yg_giveshare"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "logs_username",
                "",
                "@username –∫–∞–Ω–∞–ª–∞/—á—è—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º, —É–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å 'me'; –±–µ–∑ @)",
                validator=loader.validators.Hidden(loader.validators.String()),
            ),
            loader.ConfigValue(
                "watcher_on",
                True,
                "—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä–∞",
                validator=loader.validators.Boolean()
            )
        )
        self.client = None
        self.scraper = cloudscraper.create_scraper()
        self.processed_codes = set()

    async def client_ready(self, client, db):
        self.client = client
        self.client.add_event_handler(self.giveshare, events.NewMessage)
        self.client.add_event_handler(self.giveshare, events.MessageEdited)

    async def giveshare(self, event):
        if not self.config["watcher_on"]:
            return

        message_text = event.message.message
        url_pattern = r'https?://t\.me/GiveShareBot/app\?startapp=([A-Za-z0-9]+)'
        codes_in_text = re.findall(url_pattern, message_text)

        if event.message.reply_markup:
            for row in event.message.reply_markup.rows:
                for button in row.buttons:
                    if isinstance(button, KeyboardButtonUrl) and button.url:
                        code_match = re.match(url_pattern, button.url)
                        if code_match:
                            code = code_match.group(1)
                            if code not in self.processed_codes:
                                await self.participate(code)
                            return

        if codes_in_text:
            for code in codes_in_text:
                if code not in self.processed_codes:
                    await self.participate(code)
    
    async def log(self, message):
        if self.config["logs_username"]:
            await self.client.send_message(self.config["logs_username"], message, link_preview=False)

    async def participate(self, code):
        giveaway_url = f"https://t.me/GiveShareBot/app?startapp={code}"

        init_data = await self.data()
        print(init_data)
        
        response = self.scraper.post(
            'https://api.giveshare.ru/index',
            headers={
                'Content-Type': 'application/json',
                'Accept': 'application/json, text/plain, */*'
            },
            json={
                "initData": init_data,
                "param": code
            }
        )
        
        raffle_data = response.json()
        
        if 'raffle' in raffle_data:
            raffle = raffle_data['raffle']
            log_info = (
                f"<emoji document_id=5456140674028019486>‚ö°Ô∏è</emoji> <b>–£—á–∞—Å—Ç–≤—É—é –≤ –Ω–æ–≤–æ–º <a href='{giveaway_url}'>GiveShare —Ä–æ–∑—ã–≥—Ä—ã—à–µ</a>!</b>\n\n"
                f"<emoji document_id=5467538555158943525>üí≠</emoji> <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{raffle['title']}</code>\n"
                f"<emoji document_id=5334544901428229844>‚ÑπÔ∏è</emoji> <b>–¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> <code>{raffle['members_count']}</code>\n"
                f"<emoji document_id=5440621591387980068>üîú</emoji> <b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <code>{raffle['date_end']}</code>\n\n"
                f"<emoji document_id=5282843764451195532>üñ•</emoji> <i>–¢–∞–∫ –∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:</i>\n"
            )
            
            for channel in raffle['channels']:
                channel_link = channel['link']
                channel_name = channel['name']
                log_info += f'‚Ä¢ <b><a href="{channel_link}">{channel_name}</a></b>\n'
                await self.subscribe(channel_link)
            
            self.scraper.post(
                'https://api.giveshare.ru/member/check',
                headers={'Content-Type': 'application/json'},
                json={
                    "initData": init_data,
                    "raffle": raffle['id']
                }
            )

            self.processed_codes.add(code)
            await self.log(log_info)
        else:
            return

    async def data(self):
        bot = await self.client.get_input_entity(1618805558)
        app = InputBotAppShortName(bot_id=bot, short_name="app")
        web_view = await self.client(RequestAppWebViewRequest(peer='me', app=app, platform='android'))
        auth_url = web_view.url
        init_data = unquote(auth_url.split('tgWebAppData=')[1].split('&tgWebAppVersion')[0])
        return init_data

    async def subscribe(self, channel_link):
        invite_code = channel_link.split('+')[1]
        try:
            await self.client(ImportChatInviteRequest(invite_code))
        except errors.rpcerrorlist.UserAlreadyParticipantError:
            pass
        except Exception as e:
            await self.log(f"<emoji document_id=5240241223632954241>üö´</emoji> <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª {channel_link}</b>: {e}")

    async def givesharecmd(self, message):
        """–≤–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö"""
        self.config["watcher_on"] = not self.config["watcher_on"]
        await message.edit(f"<emoji document_id=5352746955648813465>ü§ì</emoji> <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö {'–≤–∫–ª—é—á–µ–Ω–æ' if self.config['watcher_on'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}</b>")