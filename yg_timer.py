__version__ = (1, 4, 8, 8)

# This file is a part of Hikka Userbot
# Code is NOT licensed under CC-BY-NC-ND 4.0 unless otherwise specified.
# üåê https://github.com/hikariatama/Hikka

# You CAN edit this file without direct permission from the author.
# You can redistribute this file with any modifications.

# meta developer: @yg_modules
# scope: hikka_only
# scope: hikka_min 1.6.3

# ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ
# ‚ñë‚ñà‚ñë‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñë‚ñà‚ñë‚ÄÉ ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñÑ‚ñà

import asyncio
import time
from telethon.tl.types import Message

from .. import loader, utils

class yg_timer(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏."""

    strings = {"name": "yg_timer"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            "update_interval", 11, "Interval for updating the timer display in seconds"
        )
        self.timers = {}
        self.timer_counter = 0

    async def client_ready(self, client, db):
        self.client = client
    
    async def start_timer(self, message, timer_id, duration, initial_time_text):
        start_time = time.time()
        while time.time() - start_time < duration:
            remaining_time = int(duration - (time.time() - start_time))
            hours, remainder = divmod(remaining_time, 3600)
            minutes, seconds = divmod(remainder, 60)
            timer_message = (
                f"<emoji document_id=5872756762347573066>‚è≤</emoji> <b>–¢–∞–π–º–µ—Ä</b> <code>#{timer_id}</code>\n"
                f"<emoji document_id=5451732530048802485>‚è≥</emoji> <b>–ó–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:</b> <code>{initial_time_text}</code>\n"
                f"<emoji document_id=5469741319330996757>üí´</emoji> <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> <code>{hours:02}:{minutes:02}:{seconds:02}</code>\n\n"
                f"<i>–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ {self.config['update_interval']} —Å–µ–∫—É–Ω–¥ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ)</i>"
            )
            await message.edit(timer_message)
            await asyncio.sleep(self.config["update_interval"])
            if timer_id not in self.timers or not self.timers[timer_id]:
                return
        await message.edit(f"<emoji document_id=5427009714745517609>‚úÖ</emoji> <b>–¢–∞–π–º–µ—Ä</b> <code>#{timer_id}</code> <b>–∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n<b>–ó–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!</b>")

    @loader.unrestricted
    async def timercmd(self, message: Message):
        """<–≤—Ä–µ–º—è> - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä"""
        args = utils.get_args(message)
        if len(args) < 2:
            await utils.answer(message, "<emoji document_id=5465665476971471368>‚ùå</emoji> <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –ü—Ä–∏–º–µ—Ä:</b> <code>.timer 1 —á–∞—Å</code>")
            return

        time_amount = float(args[0])
        time_unit = args[1].lower()
        if time_unit.endswith("—Å–µ–∫") or time_unit.endswith("s"):
            duration = time_amount
            initial_time_text = f"{time_amount} —Å–µ–∫"
        elif time_unit.endswith("–º–∏–Ω") or time_unit.endswith("m"):
            duration = time_amount * 60
            initial_time_text = f"{time_amount} –º–∏–Ω"
        elif time_unit.endswith("—á–∞—Å") or time_unit.endswith("h"):
            duration = time_amount * 3600
            initial_time_text = f"{time_amount} —á–∞—Å"
        elif time_unit.endswith("–¥–µ–Ω—å") or time_unit.endswith("d"):
            duration = time_amount * 86400
            initial_time_text = f"{time_amount} –¥–µ–Ω—å"
        else:
            await utils.answer(message, "<emoji document_id=5465665476971471368>‚ùå</emoji> <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ–∫, –º–∏–Ω, —á–∞—Å, –¥–µ–Ω—å –∏–ª–∏ –∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏</b>")
            return

        self.timer_counter += 1
        timer_id = self.timer_counter
        timer_message = await utils.answer(
            message, f"–¢–∞–π–º–µ—Ä #{timer_id}\n–ó–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {initial_time_text}\n–û—Å—Ç–∞–ª–æ—Å—å: 00:00:00\n–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –∫–∞–∂–¥—ã–µ {self.config['update_interval']} —Å–µ–∫—É–Ω–¥"
        )
        self.timers[timer_id] = True

        await asyncio.create_task(self.start_timer(timer_message, timer_id, duration, initial_time_text))

    @loader.unrestricted
    async def stoptimercmd(self, message: Message):
        """<–Ω–æ–º–µ—Ä —Ç–∞–π–º–µ—Ä–∞> - –æ—Å—Ç–∞–Ω–∞–≤–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä"""
        args = utils.get_args(message)
        if not args:
            await utils.answer(message, "<emoji document_id=5465665476971471368>‚ùå</emoji> <b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏</b>")
            return

        try:
            timer_id = int(args[0])
            if timer_id in self.timers and self.timers[timer_id]:
                self.timers[timer_id] = False
                await utils.answer(message, f"<emoji document_id=5427009714745517609>‚úÖ</emoji> <b>–¢–∞–π–º–µ—Ä</b> <code>#{timer_id}</code> <b>o—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>")
            else:
                await utils.answer(message, f"<emoji document_id=5465665476971471368>‚ùå</emoji> <b>–¢–∞–π–º–µ—Ä —Å –Ω–æ–º–µ—Ä–æ–º</b> <code>#{timer_id}</code> <b>–Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>")
        except ValueError:
            await utils.answer(message, "<emoji document_id=5465665476971471368>‚ùå</emoji> <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–∞–π–º–µ—Ä–∞</b>")

    async def __unload(self):
        for timer_id in self.timers:
            self.timers[timer_id] = False